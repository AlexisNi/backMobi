#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
/*const throng = require('throng');
 const WORKERS = process.env.WEB_CONCURRENCY || 1;
 throng({
 workers: WORKERS,
 lifetime: Infinity
 }, start);
 function start() {*/
var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
/*
 var portTest=+process.env.NODE_APP_INSTANCE+3000;
 */

var port = normalizePort(3000);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = app.io;
io.attach(server,{'pingInterval': 2000, 'pingTimeout': 5000});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,function () {

    fs.openSync('/tmp/app-initialized', 'w');

    console.log('This is on Heroku..!!');


});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
/*
 }*/